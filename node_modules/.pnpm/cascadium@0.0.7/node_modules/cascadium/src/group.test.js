import { expect, it } from '@jest/globals';
import { test } from 'picomatch';
import { Obj } from 'prelude-ls';
import {Group} from './group';
import {List} from './list';
import { randomString, randomSelect } from './test-utils';

const rawName = [...Array(10)]
  .map(() => randomString(20))
  .sort();

const rawCode = rawName.map(name => [...Array(10)].map(() => ({name, code: randomString(2)})))
  .flat();

const group = List.from(rawCode).grip('name');

it('create group', () => {

  expect(group.cons).toBe(List);
  expect(Object.keys(group.dict).sort()).toEqual(rawName);
})

it('create group', () => {

  expect(new Group(undefined, group.dict).cons).toBe(Array);
})

it('map', () => {  
  const mappedIdent = group.map();
  expect(group.dict).toEqual(mappedIdent.dict);

  const mappedLen = group.map(([k, v]) => [k, v.map(({code}) => code.length)]);
  expect(Object.values(mappedLen.dict).every(g => g.every(x => x === 2))).toBe(true);
})

it('get', () => {
  const key = randomSelect(rawName);
  
  expect(group.get(key).every(({name}) => name === key)).toBe(true);
})

it('keys', () => {
  expect(group.keys()).toEqual(Object.keys(group.dict));
})

it('getDict', () => {
  expect(group.getDict()).toBe(group.dict);
})
